import { google } from 'googleapis';
import path from 'path';
import config from '../config/env.js';

// Cache para √≥rdenes consultadas recientemente (evitar m√∫ltiples llamadas a la API)
const orderCache = {
  orders: {},
  lastFetch: null
};

// Tiempo de expiraci√≥n del cache (5 minutos)
const CACHE_EXPIRY = 5 * 60 * 1000;

/**
 * Busca √≥rdenes en Google Sheets por nombre de cliente o por fecha
 * @param {string} searchTerm - T√©rmino de b√∫squeda (nombre o fecha)
 * @returns {Promise<Array>} - Lista de √≥rdenes que coinciden con la b√∫squeda
 */
async function findOrders(searchTerm) {
  try {
    // Verificar si podemos usar el cache
    const now = Date.now();
    if (orderCache.lastFetch && (now - orderCache.lastFetch < CACHE_EXPIRY)) {
      console.log("üîç Buscando en cache de √≥rdenes...");
      
      // Buscar en √≥rdenes cacheadas
      const results = Object.values(orderCache.orders).filter(order => {
        const searchLower = searchTerm.toLowerCase();
        return (
          order.nombre.toLowerCase().includes(searchLower) ||
          order.fecha.toLowerCase().includes(searchLower) ||
          order.felicitado.toLowerCase().includes(searchLower)
        );
      });
      
      if (results.length > 0) {
        console.log(`‚úÖ Encontradas ${results.length} √≥rdenes en cache`);
        return results;
      }
    }
    
    // Si no hay cache o no se encontr√≥, obtener datos de Google Sheets
    console.log("üîÑ Obteniendo √≥rdenes desde Google Sheets...");
    
    const auth = new google.auth.GoogleAuth({
      keyFile: path.join(process.cwd(), 'src/credentials', 'credentials.json'),
      scopes: [config.GOOGLECLOUDURL],
    });

    const authClient = await auth.getClient();
    const sheets = google.sheets('v4');
    
    // Obtener todas las √≥rdenes de la hoja
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: config.SPREADSHEET_ID,
      range: 'pedidos', // Nombre de la hoja
      auth: authClient,
    });
    
    // Verificar si hay datos
    if (!response.data.values || response.data.values.length <= 1) {
      console.log("‚ùå No hay √≥rdenes en la hoja de c√°lculo");
      return [];
    }
    
    // Procesar los datos (asumiendo que la primera fila son cabeceras)
    const headers = ['nombre', 'felicitado', 'fecha', 'franja_horaria', 'pedido', 'timestamp'];
    const orders = response.data.values.slice(1).map((row, index) => {
      const order = {};
      
      // Mapear valores a propiedades usando nombres de cabecera
      headers.forEach((header, i) => {
        order[header] = row[i] || '';
      });
      
      // A√±adir un ID para referencia
      order.id = `ORD-${index + 1}`;
      
      return order;
    });
    
    // Actualizar cache
    orderCache.orders = {};
    orders.forEach(order => {
      orderCache.orders[order.id] = order;
    });
    orderCache.lastFetch = now;
    
    // Buscar coincidencias
    const results = orders.filter(order => {
      const searchLower = searchTerm.toLowerCase();
      return (
        order.nombre.toLowerCase().includes(searchLower) ||
        order.fecha.toLowerCase().includes(searchLower) ||
        order.felicitado.toLowerCase().includes(searchLower)
      );
    });
    
    console.log(`‚úÖ Encontradas ${results.length} √≥rdenes en Google Sheets`);
    return results;
    
  } catch (error) {
    console.error("‚ùå Error al buscar √≥rdenes:", error);
    throw error;
  }
}

/**
 * Formatea las √≥rdenes para presentarlas al usuario
 * @param {Array} orders - Lista de √≥rdenes
 * @returns {string} - Texto formateado para enviar al usuario
 */
function formatOrdersForDisplay(orders) {
  if (!orders || orders.length === 0) {
    return "No encontr√© pedidos que coincidan con tu b√∫squeda. Por favor verifica los datos o intenta con otro t√©rmino de b√∫squeda.";
  }
  
  // Limitar a m√°ximo 3 √≥rdenes para no saturar el mensaje
  const displayOrders = orders.slice(0, 3);
  
  let message = `üìã *Encontr√© ${orders.length} pedido(s):*\n\n`;
  
  displayOrders.forEach((order, index) => {
    message += `*Pedido #${order.id}*\n`;
    message += `üë§ Cliente: ${order.nombre}\n`;
    message += `üéÅ Para: ${order.felicitado}\n`;
    message += `üìÖ Fecha: ${order.fecha}\n`;
    message += `‚è∞ Horario: ${order.franja_horaria}\n`;
    message += `üå∏ Detalles: ${order.pedido.substring(0, 50)}${order.pedido.length > 50 ? '...' : ''}\n`;
    
    // A√±adir separador entre √≥rdenes
    if (index < displayOrders.length - 1) {
      message += "\n-------------------\n\n";
    }
  });
  
  // A√±adir mensaje si hay m√°s √≥rdenes que no se muestran
  if (orders.length > 3) {
    message += `\n\n_Y ${orders.length - 3} pedido(s) m√°s. Por favor, especifica mejor tu b√∫squeda para ver resultados m√°s precisos._`;
  }
  
  return message;
}

/**
 * Detecta intenci√≥n de consulta de estado de pedido en un mensaje
 * @param {string} message - Mensaje del usuario
 * @returns {boolean} - True si el mensaje parece ser consulta de estado
 */
function isOrderStatusQuery(message) {
  const statusKeywords = [
    'estado de mi pedido', 'estado de pedido', 'mi pedido', 'mi orden',
    'seguimiento', 'tracking', 'cuando llega', 'cu√°ndo llega',
    'estado', 'consultar pedido', 'consultar orden', 'ver pedido',
    'mi compra', 'mis flores', 'mi entrega', 'd√≥nde est√°', 'donde esta',
    'ya enviar', 'ya enviaron', 'enviaste', 'entregado'
  ];
  
  const messageLower = message.toLowerCase();
  
  // Verificar si contiene alguna palabra clave
  return statusKeywords.some(keyword => messageLower.includes(keyword));
}

export default {
  findOrders,
  formatOrdersForDisplay,
  isOrderStatusQuery
};